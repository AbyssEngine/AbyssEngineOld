name: CI
on:
  - push
  - pull_request

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Windows
            os: windows-latest
            triplet: x64-windows
          - name: Ubuntu GCC
            os: ubuntu-latest
            triplet: x64-linux
          - name: MacOS
            os: macos-11
            triplet: x64-osx
    env:
      CMAKE_BUILD_DIR: ${{ github.workspace }}/builddir/
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      CMAKE_BUILD_TYPE: "MinSizeRel"

    steps:
      - name: Setup XCode
        uses: maxim-lobanov/setup-xcode@v1
        if: matrix.os == 'macos-11'
        with:
          xcode-version: "13.0"

      - uses: actions/checkout@v2
        name: Checkout

      - uses: actions/setup-python@v1
      - uses: BSFishy/pip-action@v1
        with:
            packages: |
                conan

      - uses: lukka/get-cmake@latest
        name: Get CMake

      - name: Install Deps (Windows)
        if: matrix.os == 'windows-latest'
        uses: crazy-max/ghaction-chocolatey@v1
        with:
          args: install nasm

      - name: Use MSVC (Windows)
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install Deps (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install nasm libxext-dev libavcodec-dev libavformat-dev libavdevice-dev libavfilter-dev libegl-dev

      - name: Install GCC (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: sudo add-apt-repository ppa:ubuntu-toolchain-r/test && sudo apt-get install g++-10 libstdc++-10-dev && echo "CC=gcc-10" >> $GITHUB_ENV && echo "CXX=g++-10" >> $GITHUB_ENV

      - name: Configure Conan (MacOS)
        if: matrix.os == 'macos-11'
        run: |
            conan profile new default --detect
            conan profile update settings.compiler.libcxx=libc++ default
      - name: Configure Conan (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
            conan profile new default --detect
            conan profile update settings.compiler.libcxx=libstdc++11 default

      - name: Install Conan Deps
        run: |
            mkdir -p builds/ninja-vcpkg
            cd builds/ninja-vcpkg
            conan install ../.. --build=missing

      - name: Install LLVM and Clang (MacOS)
        if: matrix.os == 'macos-11'
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "13.0"

      - name: Install Deps (MacOS)
        if: matrix.os == 'macos-11'
        run: brew install nasm icu4c && echo "CC=$LLVM_PATH/bin/clang" >> $GITHUB_ENV && echo "CXX=$LLVM_PATH/bin/clang++" >> $GITHUB_ENV

      - name: Maybe reconfigure Conan (MacOS)
        if: matrix.os == 'macos-11'
        run: |
            rm ~/.conan/profiles/default
            conan profile new default --detect
            conan profile update settings.compiler.libcxx=libcxx default

      - name: Remove broken dep
        if: matrix.os == 'macos-11'
        run: sed -i -e '/icu/d' vcpkg.json

      - name: Run vcpkg
        uses: lukka/run-vcpkg@v10
        with:
          vcpkgJsonGlob: "**/vcpkg.json"
          vcpkgDirectory: "${{ github.workspace }}/vcpkg"
          vcpkgGitCommitId: "709e9ec32e27319636c047a38744e1ce0e229ae4"
          appendedCacheKey: ${{ hashFiles( '**/vcpkg.json' ) }}

      - name: Build
        uses: lukka/run-cmake@v10
        with:
          configurePreset: 'ninja-vcpkg'
          buildPreset: 'ninja-vcpkg'

      - name: Test
        run: builds/ninja-vcpkg/tests/abyss_test

      - name: Package (Windows)
        if: ${{ matrix.os == 'windows-latest' && github.event_name == 'push' }}
        working-directory: builds/ninja-vcpkg/
        run: cpack -G ZIP -C Debug ./

      - name: Upload Release (Windows)
        if: ${{ matrix.os == 'windows-latest' && github.event_name == 'push' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: "builds/ninja-vcpkg/package/abyss-windows.zip"
          overwrite: true
          prerelease: true
          tag: unstable
          body: "Unstable Release"

      - name: Package (Ubuntu)
        if: ${{ matrix.os == 'ubuntu-latest' && github.event_name == 'push' }}
        working-directory: builds/ninja-vcpkg/
        run: cpack -G TGZ -C Debug ./

      - name: Upload Release (Windows)
        if: ${{ matrix.os == 'ubuntu-latest' && github.event_name == 'push' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: "builds/ninja-vcpkg/package/abyss-linux.tar.gz"
          overwrite: true
          prerelease: true
          tag: unstable
          body: "Unstable Release"


      - name: Package (MacOS)
        if: ${{ matrix.os == 'macos-11' && github.event_name == 'push' }}
        working-directory: builds/ninja-vcpkg/
        run: cpack -G DragNDrop -C Debug ./

      - name: Upload Release (MacOS)
        if: ${{ matrix.os == 'macos-11' && github.event_name == 'push' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: "builds/ninja-vcpkg/package/abyss-darwin.dmg"
          overwrite: true
          prerelease: true
          tag: unstable
          body: "Unstable Release"
