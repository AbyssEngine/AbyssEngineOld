=======================================================================
= ENGINE FUNCTIONS
= ---------------------------------------------------------------------
= These functions are always available to any script running in the
= engine.
=======================================================================

-----------------------------------------------------------------------

getConfig(category, value): string
    Returns the value of a configuration element.
    Category/Value is based on the INI file.

    A system category "#Abyss" has the following properties:
        "BasePath" - The base path of the engine

-----------------------------------------------------------------------

log(level, message)
    Writes message to the log
    Level is "info", "error", "fatal", "warn", debug", "trace"
    "info" does not show on release mode builds of the engine.

-----------------------------------------------------------------------

showSystemCursor(show)
    Shows/hides the system cursor

-----------------------------------------------------------------------

shutdown()
    Shuts down the engine

-----------------------------------------------------------------------

sleep(msec)
    Sleeps the specified number of milliseconds

-----------------------------------------------------------------------

setBootText(text)
    Sets the boot text (in boot mode)

-----------------------------------------------------------------------

addLoaderProvider(type, path)
    Type is "mpq" or "filesystem"

-----------------------------------------------------------------------

loadString(path): string
    Loads a resource and returns the data as a string

-----------------------------------------------------------------------

fileExists(path): bool
    Returns true if the file exists, otherwise false

-----------------------------------------------------------------------

exitBootMode()
    Exits boot mode and begins run mode.

-----------------------------------------------------------------------

loadPalette(paletteName, path)
    Loads a palette from the specified path and assigns it to the name.

-----------------------------------------------------------------------

loadSprite(path, paletteName): sprite
    Loads a sprite based on the specified path and assigns the named
    palette to it.

-----------------------------------------------------------------------

loadSpriteFont(path, paletteName): spritefont
    Loads a sprite font from the specified path. Note that the path
    should not include the .dc6 or .tbl extension; those extensions
    will be uppended to the supplied bath during the load operation.

-----------------------------------------------------------------------

createLabel(font): label
    Create a label based on the specified spritefont.

-----------------------------------------------------------------------

createButton(font, spritePath, paletteName): button
    Creates a button based on the spritefont, sprite path, and
    palette name.

    The sprite path and palette name are optional if the button
    has no backing sprite (text buttons).

-----------------------------------------------------------------------

setCursor(sprite, offsetX, offsetY)
    Sets the engine cursor to the specified sprite.
    Offset X/Y offsets the sprite relative to the actual mouse position.

-----------------------------------------------------------------------

getRootNode(): node
    Returns the root node in the engine's scene graph.

-----------------------------------------------------------------------

playVideo(path, wait)
    Plays a video. This will pause all updates/rendering in the engine.
    If wait is true, the function will not return until the video
    finishes playing.

-----------------------------------------------------------------------

fileExists(path): bool
    Returns true if the path exists, false otherwise.

=======================================================================
= OBJECT TYPES
= ---------------------------------------------------------------------
= The following are object types that are defined by the system.
=======================================================================


-----------------------------------------------------------------------
LABEL <NODE>
-----------------------------------------------------------------------
Description:

    Represents a label.
    Labels are a child class of nodes.
    Labels render text to the screen via sprite fonts.


Functions:

    caption(text)
    caption(): string
        Gets or sets the caption of the label.

    hAlign(alignment)
    hAlign(): alignment
        Gets or sets the horizontal alignment of the label.
        Valid alignments are "begin", "middle" and "end".

    vAlign(alignment)
    vAlign(): alignment
        Gets or sets the vertical alignment of the label.
        Valid alignments are "begin", "middle" and "end".

    blendMode(): string
    blendMode(mode)
        Gets/Sets the blend mode of the label.
        Mode is "none", "blend", "additive", "modulate", "multiply"

    colorMod(): red, green, blue
    colorMod(red, green, blue)
        Gets or sets the color mod of the label.
        Red, green, and blue components are a range of 0 to 255.

-----------------------------------------------------------------------
SPRITE <NODE>
-----------------------------------------------------------------------
Description:

    Represents a sprite.
    Sprites are a child class of nodes.


Functions:

    cellSize(): x, y
    cellSize(x, y)
        Gets/Sets the cell size of the sprite.
        The cell size is the number of frames (in x by y grid) to draw
        at the same time.

    bottomOrigin(): bool
    bottomOrigin(isBottomOrigin)
        Gets/Sets the indicator that the bottom left of the sprite
        should be where the X/Y location is oriented.

    blendMode(): string
    blendMode(mode)
        Gets/Sets the blend mode of the sprite.
        Mode is "none", "blend", "additive", "modulate", "multiply"

    playMode(): string
    playMode(mode)
        Gets/Sets the play mode of the sprite.
        Mode is "paused", "forwards", 'backwards"

    playLength(): number
    playLength(time)
        Gets/Sets the play length of the sprite's animation.
        Play length is the number of seconds (0.5 = half second) that
        it takes to run through all the frames of the current animation.

    frame(): number
    frame(index)
        Gets/Sets the current frame index for the current animation.

    animation(): number
    animation(index)
        Gets/Sets the current animation for the current animation.
        When setting an animation, the frame index is automatically
        set to 0.

    totalAnimations(): number
        Gets the total number of animations available for this sprite.

    framesPerAnimation(): number
        Gets the number of frames in an animation.

    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
    . Mouse Events
    . All functions have similar inputs/outputs so are grouped together in this document...
    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
    onMouseEnter(func(x,y):bool)          Sets (or clears of nil) a callback function to be executed when the mouse enters the sprite.
    onMouseLeave(func(x,y):bool)          Sets (or clears of nil) a callback function to be executed when the mouse leaves the sprite.
    onMouseMove(func(x,y):bool)           Sets (or clears of nil) a callback function to be executed when the mouse moves across the sprite.
    onMouseButtonDown(func(buttons):bool) Sets (or clears of nil) a callback function to be executed when the mouse button is pressed on the sprite.
    onMouseButtonUp(func(buttons):bool)   Sets (or clears of nil) a callback function to be executed when the mouse button is pressed on the sprite.

        The callback function will receive a value representing bitflags
        For the buttons that are pressed:
            Left Button   = $01
            Right Button  = $02
            Middle Button = $04

        The callback should return a boolean representing whether
        the event has been handled or not. If true is returned,
        no other node will receive input events (if false they will).
    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .



-----------------------------------------------------------------------
BUTTON <NODE>
-----------------------------------------------------------------------
Description:

    Represents a button.
    Buttons are a child class of nodes.


Functions:

    state(): buttonState
    state(buttonState)
        Gets/Sets the button state.
        Possible values are "normal", "pressed", "hover", and "disabled".

    caption(): string
    caption(string)
        Gets/Sets the button's caption.

    checked(): bool
    checked(bool)
        Gets/Sets the checked state of the button (if it is a checkbox).

    checkbox(): bool
    checkbox(bool)
        Gets/Sets a flag determining if this button is a checkbox.

    segments(): x, y
    segments(x, y)
        Gets/Sets how many segments (frames) in each direction represent a
        single button state.

    textOffset(): x, y
    textOffset(x, y)
        Gets/Sets the text offset on the button.

    size(): x, y
    size(x, y)
        Gets/Sets the size of the button.
        Used to determine the center of the caption.

    labelColor(): r, g, b
    labelColor(r, g, b)
        Gets/Sets the label color.
        Each component's value is between 0 and 255.

    colorMod(): r, g, b
    colorMod(r, g, b)
        Gets/Sets the color mod of the button image.

    frameIndex(): int
    frameIndex(int)
        Gets/Sets the current frame index of the button.

    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
    . Events
    . All functions have similar inputs/outputs so are grouped together in this document...
    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

    onActivate(func())                    Sets (or clears of nil) a callback function to be executed when the button is activated.

    . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .



-----------------------------------------------------------------------
NODE
-----------------------------------------------------------------------
Description:

    Represents an object on the render graph. This is the base type for all rendering objects.


Functions:

    visible(): bool
    visible(show)
        Gets/Sets visibility of the node.
        Nodes that are not visible will not be rendered (nor will the child nodes)


    active(): bool
    active(isActive)
        Gets/Sets activate state of the node.
        Nodes that are not active will neither render nor update (nor will the child nodes)


    position(): x, y
    position(x, y)
        Gets/Sets the position of the node.


    appendChild(childNode)
        Appends the child node to this node.

    removeAllChildren()
        Removes (and destroys) all child nodes

    detach()
        Detaches the node from its parent.

    destroy()
        Destroys this node.
        It will automatically be removed from it's parent if it is currently a child of another node.
