#!/usr/bin/env python3

import os
from dataclasses import dataclass
from typing import List

@dataclass
class GlobalFunctionItem:
    function_name: str
    owned_function: str

@dataclass
class ParameterDefinition:
    name: str
    type: str
    comment: str

@dataclass
class FunctionDefinition:
    name: str
    return_type: str
    comment: str
    parameters: List[ParameterDefinition]


class Generator:
    def __init__(self, base_path, out_path):
        self.base_path = base_path
        self.out_path = out_path
        self.generated_banner = [
            "-- ---------------------------------------------------------------------- --",
            "-- THIS FILE WAS AUTO-GENERATED BY generate.py -  DO NOT HAND MODIFY!     --",
            "-- ---------------------------------------------------------------------- --",
            ""
        ]

    def ReadFileLines(self, file_path) -> List[str]:
        """ Reads a file and returns it as a collection of strings. """

        file = open(file_path, 'r')
        source_lines = file.readlines()
        file.close()
        return source_lines

    def WriteFileLines(self, file_path, lines):
        file = open(file_path, 'w')
        file.write("\n".join(self.generated_banner))
        file.write("\n".join(lines))
        file.write("\n") # Add trailing line
        file.close()

    def GetTopLevelLuaFunctions(self) -> List[GlobalFunctionItem]:
        """ Returns the list of top level functions (abyss module functions). """

        results: GlobalFunctionItem[int] = []

        file_lines = self.ReadFileLines(
            os.path.join(self.base_path, "scripthost.cpp"))
        for line in file_lines:

            # Skip if this isn't a module function
            if not "module.set_function(\"" in line:
                continue

            parts = line.strip().split('"')
            function_name = parts[1].strip()
            owned_function = parts[2].strip().split('&')[1].split(',')[0].strip()
            results.append(GlobalFunctionItem(function_name, owned_function))
        return results

    def GetFunctionsForHeader(self, header_path):
        result = {}
        current_class = ""

        file_lines = self.ReadFileLines(header_path)

        for line_idx in range(0, len(file_lines)):
            line = file_lines[line_idx].strip()

            if line.startswith("class ") and line.endswith("{"):
                current_class = line.split(" ")[1].strip()
                continue

            if not ("(" in line and ");" in line):
                continue

            function_name = line.split("(")[0]
            function_name = function_name.split(" ")[function_name.count(" ")]

            print("Function Name:", function_name)

            param_strs = line.split("(")[1].split(")")[0].strip().split(",")
            print(" -> ParamStr:", param_strs)

        return result

    def Generate(self):
        abyss_funcs = self.GetTopLevelLuaFunctions()
        for func in abyss_funcs:
            print("Abyss Function:", func.function_name,
                  " -> ", func.owned_function)

        self.GetFunctionsForHeader(os.path.join(self.base_path, "scripthost.h"))


generator = Generator(
    os.path.join(os.path.curdir, "..", "apps", "abyssengine", "src", "engine"),
    os.path.join(os.path.curdir, "library")
)
generator.Generate()
